// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define PI 3.14159265359

#include "Utils/Geometry.cginc"
#include "Utils/Easing.hlsl"

Texture2D<float4> source;
RWTexture2D<float4> output;
float time;
float4 axisColor;
float4 sweepColor;

float getDelta(float x)
{
    return (sin(x) + 1.0) / 2.0;
}

float onLine(float line_y, float y, float line_width, float edge_width)
{
    float line_half_width = line_width * 0.5;
    //return step(line_y - line_half_width - edge_width, y) - step(line_y + line_half_width + edge_width, y);
    return smoothstep(line_y - line_half_width - edge_width, line_y - line_half_width, y) - smoothstep(line_y + line_half_width, line_y + line_half_width + edge_width, y);
}

float sweep(float2 pt, float2 center, float radius, float line_width, float edge_thickness)
{
    float2 d = pt - center;
    float theta = time;
    float2 p = float2(cos(theta), -sin(theta));
    //float h = clamp(dot(d, p), 0.0, radius);
    //float l = length(d - p * h);
    float r = dot(d, p);
    float l = dot(d, float2(p.y, -p.x));
    
    float gradient = 0;
    const float gradientAngle = PI * 0.5;
    
    if (length(d) < radius)
    {
        float angle = fmod(theta + PI2 + atan2(d.y, d.x), PI2);
        gradient = clamp(gradientAngle - angle, 0, gradientAngle) / gradientAngle * 0.5;
    }
    //float inCircle = 1.0 - smoothstep(line_width, line_width + edge_thickness, l);
    //float onLine = 1.0;
    //float onLine = smoothstep(-10 * line_width - edge_thickness, 0 * line_width, l) - smoothstep(0, 10 * line_width + edge_thickness, l);
    float onLine = smoothstep(-line_width - edge_thickness, 0, l) - step(0, l);
    float inCircle = step(0, r) - step(radius, r);
    return gradient + onLine * inCircle;
}

float circle(float2 pt, float2 center, float radius, float line_width, float edge_thickness)
{
    pt -= center;
    float len = length(pt);
    //Change true to false to soften the edge
    //float result = smoothstep(radius - line_width / 2.0 - edge_thickness, radius - line_width / 2.0, len) - smoothstep(radius + line_width / 2.0, radius + line_width / 2.0 + edge_thickness, len);
    //return result;
    return onLine(radius, len, line_width, edge_thickness);
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float width; //= source.Length.x;
    float height; //= source.Length.y;
    source.GetDimensions(width, height);
    
    float3 white = 1;
    
    float2 uv = (float2)id.xy;
    float2 center = 0.5;
    float aspectRatio = width / height;

    if (aspectRatio > 1)
    {
        uv /= height;
        center.x *= aspectRatio;
    }
    else
    {
        uv /= width;
        center.y /= aspectRatio;
    }

    float3 color = onLine(uv.y, center.y, 0.002, 0.001) * axisColor.rgb; //xAxis
    color += onLine(uv.x, center.x, 0.002, 0.001) * axisColor.rgb; //yAxis
    //TODO: Add code here
    color += circle(uv, center, 0.45, 0.002, 0.001) * axisColor.rgb;
    color += circle(uv, center, 0.3, 0.002, 0.001) * axisColor.rgb;
    color += circle(uv, center, 0.15, 0.002, 0.001) * axisColor.rgb;
    color += sweep(uv, center, 0.45, 0.003, 0.001) * sweepColor.rgb;
    
    //float offset = sin(time * 4) * 0.05 + 0.516;
    float offset = ease_out_sine(1 - abs(1 - 2 * frac(time))) * 0.05 + 0.466;
    color += polygon(uv, float2(center.x + offset, center.y), 0.008, 3, 0, 0.001) * white;
    color += polygon(uv, float2(center.x - offset, center.y), 0.008, 3, PI, 0.001) * white;
    
    float alpha = saturate(color.r + color.g + color.b);
    float3 finalColor = lerp(source[id.xy].rgb, color, alpha);

    output[id.xy] = float4(finalColor, 1.0);
}