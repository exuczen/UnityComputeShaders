// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel HorzPass
#pragma kernel Highlight

#define USE_HORIZONTAL_BUFFER 0

#include "Utils/Geometry.cginc"

shared Texture2D<float4> Source;
shared RWTexture2D<float4> horzOutput;
RWTexture2D<float4> Output;
float radius;
float edgeWidth;
float shade;
float2 center;
int blurRadius;
shared StructuredBuffer<float> weights;
#if USE_HORIZONTAL_BUFFER
shared RWStructuredBuffer<float4> horzBuffer;
#endif

[numthreads(8, 8, 1)]
void HorzPass(uint3 id : SV_DispatchThreadID)
{
    int width = Source.Length.x;
    int left = max(0, (int)id.x - blurRadius);
    int count = min(blurRadius, (int)id.x) + min(blurRadius, width - (int)id.x);
    float4 color = 0;

    uint2 index = uint2((uint)left, id.y);

    [unroll(100)]
    for (int x = 0; x < count; x++)
    {
        color += Source[index] * weights[x];
        index.x++;
    }

#if USE_HORIZONTAL_BUFFER
    horzBuffer[id.x + width * id.y] = color;
#else
    horzOutput[id.xy] = color;
#endif
}

[numthreads(8, 8, 1)]
void Highlight(uint3 id : SV_DispatchThreadID)
{
    int width = Source.Length.x;
    int height = Source.Length.y;
    //Vert blur
    int begY = max(0, (int)id.y - blurRadius);
    int count = min(blurRadius, (int)id.y) + min(blurRadius, height - (int)id.y);
    float4 blurColor = (1 - sign(count)) * Source[id.xy];

#if USE_HORIZONTAL_BUFFER
    int index = id.x + width * begY;

    [unroll(100)]
    for (int y = 0; y < count; y++)
    {
        blurColor += horzBuffer[index] * weights[y];
        index += width;
    } 
#else
    uint2 index = uint2(id.x, begY);
    
    [unroll(100)]
    for (int y = 0; y < count; y++)
    {
        blurColor += horzOutput[index] * weights[y];
        index.y++;
    }
#endif

    float4 sourceColor = Source[id.xy];
    float4 shadedBlurColor = blurColor * shade;
    float4 color = lerpCircleColor(shadedBlurColor, sourceColor, id.xy, center, radius, edgeWidth);

    Output[id.xy] = color;
}
