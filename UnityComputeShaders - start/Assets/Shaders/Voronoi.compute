#define CIRCLE_THREADS int3(16, 1, 1) // max 1024
#define CLEAR_THREADS int3(32, 32, 1)
#define ANGULAR_PAIRS_STRIDE 25

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel DrawPoints
#pragma kernel DrawCircles
#pragma kernel DrawDiamonds
#pragma kernel DrawLine
#pragma kernel DrawPairLines
#pragma kernel FillCircles
#pragma kernel ClearTextures
#pragma kernel ClearPairs
#pragma kernel InitParticles
#pragma kernel RandomParticles
#pragma kernel UpdateParticles
#pragma kernel FindPairs

#include "Utils/Geometry.cginc"
#include "Voronoi.hlsl"

uint PointsCapacity;
uint PointsCount;
int Radius;
int RadiusSqr;
float LinesLerpValue;

void setParticlesAngularPair(uint j, uint k)
{
    uint iMin = min(j, k);
    uint iMax = max(j, k);
    j = iMin;
    k = iMax;
    float2 posJ = getParticlePosition(j);
    float2 posK = getParticlePosition(k);
    float2 dr = posK - posJ;
    float angle = PI - atan2(dr.y, dr.x);
    uint angleDivisions = ANGULAR_PAIRS_STRIDE - 1;
    //uint angleSection = (int)(angle * angleDivisions / PI2 + 0.5f) % angleDivisions;
    uint angleSection = (int)(angle * angleDivisions / PI2);
    uint jOffset = j * (angleDivisions + 1);
    angularPairBuffer[jOffset] = j;
    angularPairBuffer[jOffset + 1 + angleSection] = k;
}

[numthreads(CIRCLE_THREADS.x, CIRCLE_THREADS.y, CIRCLE_THREADS.z)]
void InitParticles(uint3 id : SV_DispatchThreadID)
{
    uint i = getParticleIndex(id);
    //particlesBuffer[i] = getClearParticle(wang_hash(i));
    particlesBuffer[i] = getClearParticle(lgc_hash(i));
}

[numthreads(CIRCLE_THREADS.x, CIRCLE_THREADS.y, CIRCLE_THREADS.z)]
void RandomParticles(uint3 id : SV_DispatchThreadID)
{
    uint i = getParticleIndex(id);
    if (i >= PointsCount)
    {
        return;
    }
    respawnParticle(i, 0.0, 1.0, Time);
}

[numthreads(CIRCLE_THREADS.x, CIRCLE_THREADS.y, CIRCLE_THREADS.z)]
void DrawPoints(uint3 id : SV_DispatchThreadID)
{
    uint i = getParticleIndex(id);
    if (i >= PointsCount)
    {
        return;
    }
    tryPlotParticle(i);
}

[numthreads(CIRCLE_THREADS.x, CIRCLE_THREADS.y, CIRCLE_THREADS.z)]
void UpdateParticles(uint3 id : SV_DispatchThreadID)
{
    uint i = getParticleIndex(id);
    if (i >= PointsCount)
    {
        return;
    }
    if (getParticlePosition(i).x < 0)
    {
        respawnParticle(i, 0.1, 1.0, Time);
        plotParticle(particlesBuffer[i], i); // Write particle's pixel
    }
}

[numthreads(CLEAR_THREADS.x, CLEAR_THREADS.y, CLEAR_THREADS.z)]
void FindPairs(uint3 id : SV_DispatchThreadID)
{
    if (any(id.xy == 0))
    {
        return;
    }
    uint x = id.x;
    uint y = id.y;
    int i = indexTexture[uint2(x - 1, y)];
    int j = indexTexture[id.xy];
    
    if (i >= 0 & j >= 0 & i != j)
    {
        setParticlesAngularPair(i, j);
    }
    i = indexTexture[uint2(x, y - 1)];
    j = indexTexture[id.xy];
    
    if (i >= 0 & j >= 0 & i != j)
    {
        setParticlesAngularPair(i, j);
    }
}

[numthreads(CIRCLE_THREADS.x, CIRCLE_THREADS.y, ANGULAR_PAIRS_STRIDE)]
void DrawPairLines(uint3 id : SV_DispatchThreadID)
{
    uint i = getParticleIndex(id);
    if (i >= PointsCount)
    {
        return;
    }
    //i = angularPairBuffer[i * ANGULAR_PAIRS_STRIDE];
    uint j = angularPairBuffer[i * ANGULAR_PAIRS_STRIDE + id.z];
    if (i != j)
    {
        drawLine(outputTexture, getParticlePosition(i), getParticlePosition(j), 1.0, LinesLerpValue);
    }
}

[numthreads(CIRCLE_THREADS.x, CIRCLE_THREADS.y, ANGULAR_PAIRS_STRIDE)]
void ClearPairs(uint3 id : SV_DispatchThreadID)
{
    uint i = getParticleIndex(id);
    if (i >= PointsCount)
    {
        return;
    }
    uint j = i * ANGULAR_PAIRS_STRIDE + id.z;
    angularPairBuffer[j] = i;
}

[numthreads(CIRCLE_THREADS.x, CIRCLE_THREADS.y, CIRCLE_THREADS.z)]
void DrawCircles(uint3 id : SV_DispatchThreadID)
{
    uint i = getParticleIndex(id);
    if (i >= PointsCount)
    {
        return;
    }
    // Unlike short-circuit evaluation of &&, ||, and ?: in C, HLSL expressions never short-circuit an evaluation
    // because they are vector operations. All sides of the expression are always evaluated.
    if (!particlesBuffer[i].active)
    {
        return;
    }
    int2 center = getParticlePosition(i);
    bool result = false;
    //result = result | drawJeskoCircle(center, Radius, i);
    result = result | drawMidpointCircle(center, Radius, i);
    //result = result | drawMidpoint2Circle(center, Radius, i);
    result = result | drawHornCircle(center, Radius, i);
    particlesBuffer[i].active = result;
}

[numthreads(CIRCLE_THREADS.x, CIRCLE_THREADS.y, CIRCLE_THREADS.z)]
void DrawDiamonds(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= PointsCount)
    {
        return;
    }
    drawDiamond(getParticlePosition(id.x), Radius, id.x);
}

[numthreads(31, 31, 1)]
void FillCircles(uint3 id : SV_DispatchThreadID)
{
    int2 center = int2(15, 15);
    int2 ray = (int2)id.xy - center;
    uint2 xy = getParticlePosition(id.z) + ray;
    
    if (outputTexture[xy].w < 0.5 && dot(ray, ray) < RadiusSqr)
    {
        outputTexture[xy] = getXYGradientColor(ray.x, ray.y);
    }
}

[numthreads(1, 1, 1)]
void DrawLine(uint3 id : SV_DispatchThreadID)
{
    drawLine(outputTexture, getParticlePosition(0), getParticlePosition(1), 1);
}

[numthreads(CLEAR_THREADS.x, CLEAR_THREADS.y, CLEAR_THREADS.z)]
void ClearTextures(uint3 id : SV_DispatchThreadID)
{
    outputTexture[id.xy] = ClearColor;
    setIndexInBuffer(id.xy, -1);
}
