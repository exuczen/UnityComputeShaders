// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel HorzPass
#pragma kernel Highlight

#define USE_HORIZONTAL_BUFFER 0

#include "Utils/Geometry.cginc"

shared Texture2D<float4> Source;
shared RWTexture2D<float4> horzOutput;
shared RWTexture2D<float4> output;
float radius;
float edgeWidth;
float shade;
float2 center;
int blurRadius;
#if USE_HORIZONTAL_BUFFER
shared RWStructuredBuffer<float4> horzBuffer;
#endif

[numthreads(8, 8, 1)]
void HorzPass(uint3 id : SV_DispatchThreadID)
{
    uint width;
    uint height;
    Source.GetDimensions(width, height);

    int left = max(0, (int)id.x - blurRadius);
    int count = min(blurRadius, id.x) + min(blurRadius, width - id.x);
    count = max(count, 1);
    float4 color = 0;
    
    uint2 index = uint2((uint)left, id.y);
    
    [unroll(100)]
    for (int x = 0; x < count; x++)
    {
        color += Source[index];
        index.x++;
    }
    color /= (float)count;
    
#if USE_HORIZONTAL_BUFFER
    horzBuffer[id.x + width * id.y] = color;
#else
    horzOutput[id.xy] = color;
#endif
}

[numthreads(8, 8, 1)]
void Highlight(uint3 id : SV_DispatchThreadID)
{
    uint width;
    uint height;
    Source.GetDimensions(width, height);
    
    int begY = max(0, (int)id.y - blurRadius);
    int count = min(blurRadius, id.y) + min(blurRadius, height - id.y);
    count = max(count, 1);
    float4 blurColor = 0;
    
#if USE_HORIZONTAL_BUFFER
    int index = id.x + width * begY;
    
    [unroll(100)]
    for (int i = 0; i < count; i++)
    {
        blurColor += horzBuffer[index];
        index += width;
    }
#else
    uint2 index = uint2(id.x, begY);
    
    [unroll(100)]
    for (int i = 0; i < count; i++)
    {
        blurColor += horzOutput[index];
        index.y++;
    }
#endif
    
    blurColor /= (float)count;
    
    float4 sourceColor = Source[id.xy];
    float4 shadedBlurColor = blurColor * shade;
    float4 color = lerpCircleColor(shadedBlurColor, sourceColor, id.xy, center, radius, edgeWidth);
    
    output[id.xy] = color;
}
