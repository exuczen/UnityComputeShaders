// Each #kernel tells which function to compile; you can have many kernels
#define CLEAR_GRID_THREAD_COUNT 8
#define RIGID_BODY_THREAD_COUNT 8
#define PARTICLE_THREAD_COUNT 8

#include "Utils/Math.cginc"

// Kernels

#pragma kernel GenerateParticleValues
#pragma kernel CollisionDetection
#pragma kernel ComputeMomenta
#pragma kernel ComputePositionAndRotation

struct RigidBody
{
    float3 position;
    float4 quaternion;
    float3 velocity;
    float3 angularVelocity;
    int particleIndex;
    int particleCount;
};

struct Particle
{
    float3 position;
    float3 velocity;
    float3 force;
    float3 localPosition;
    float3 offsetPosition;
};

struct Voxel
{
    int4 vox1;
    int4 vox2;
};

shared RWStructuredBuffer<RigidBody> rigidBodiesBuffer;
shared RWStructuredBuffer<Particle> particlesBuffer;
shared RWStructuredBuffer<Voxel> voxelGridBuffer;

int particleCount;
int particlesPerRigidBody;
float deltaTime;
float particleMass;

//////////////////////////////
// Generate Particle Values //
//////////////////////////////
// Per Rigid Body
// Use rigidBody positions and 
// rigidBodyQuaternions to
// Generate
// particle.position
// particle.offsetPosition
// particle.velocity
//
//////////////////////////////
[numthreads(RIGID_BODY_THREAD_COUNT, 1, 1)]
void GenerateParticleValues(uint3 id : SV_DispatchThreadID)
{
    RigidBody body = rigidBodiesBuffer[id.x];
    int pIndex = body.particleIndex;
    
    for (int i = 0; i < body.particleCount; i++)
    {
        Particle particle = particlesBuffer[pIndex];
        particle.offsetPosition = quat_mul(body.quaternion, particle.localPosition);
        particle.position = body.position + particle.offsetPosition;
        particle.velocity = body.velocity + cross(body.angularVelocity, particle.offsetPosition);
        particle.force = 0;
        particlesBuffer[pIndex++] = particle;
    }
}

/////////////////////////
// Collision Detection //
/////////////////////////
// Per Particle
// Use particle positions, grid and velocity to compute Particle force
float springCoefficient;
float dampingCoefficient;
float tangentialCoefficient;
float gravityCoefficient;
float particleDiameter;

Particle GetGroundParticle(int i_id)
{
    Particle particleI = particlesBuffer[i_id];
    Particle particleJ = particleI;
    float radius = particleDiameter * 0.5;
    particleJ.position.y = min(-radius, particleI.position.y - radius);
    particleJ.velocity = 0;
    return particleJ;
}

float3 CollisionReaction(Particle pJ, Particle pI)
{
    float3 force = 0;
    float3 relativePosition = pJ.position - pI.position;
    float distance = length(relativePosition);
    if (distance < particleDiameter)
    {
        float3 normal = relativePosition / distance;
        
        float3 repulsiveForce = -springCoefficient * (particleDiameter - distance) * normal;
        
        float3 relativeVelocity = pJ.velocity - pI.velocity;
        float3 dampingForce = dampingCoefficient * relativeVelocity;
        
        float3 tangentialVelocity = relativeVelocity - dot(relativeVelocity, normal) * normal;
        float3 tangentialForce = tangentialCoefficient * tangentialVelocity;
        
        force = repulsiveForce + dampingForce + tangentialForce;
    }
    return force;
}

float3 CollisionReaction(int j_id, int i_id)
{
    return CollisionReaction(particlesBuffer[j_id], particlesBuffer[i_id]);
}

[numthreads(PARTICLE_THREAD_COUNT, 1, 1)]
void CollisionDetection(uint3 id : SV_DispatchThreadID)
{
    float3 force = CollisionReaction(GetGroundParticle(id.x), particlesBuffer[id.x]);
    
    int bodyParticleIndex = particlesPerRigidBody * (int)(id.x / particlesPerRigidBody);
    
    for (int j = 0; j < bodyParticleIndex; j++)
    {
        force += CollisionReaction(j, id.x);
    }
    for (j = bodyParticleIndex + particlesPerRigidBody; j < particleCount; j++)
    {
        force += CollisionReaction(j, id.x);
    }
    particlesBuffer[id.x].force = force;
}

////////////////////////////
// Computation Of Momenta //
////////////////////////////
// Per RigidBdy
// Use particle forces to compute the force and angular force on the rigid body
float frictionCoefficient;
float angularFrictionCoefficient;
float angularForceScalar;
float linearForceScalar;
int activeCount;

[numthreads(RIGID_BODY_THREAD_COUNT, 1, 1)]
void ComputeMomenta(uint3 id : SV_DispatchThreadID)
{
    if (id.x < (uint)activeCount)
    {
        float3 linearForce = 0;
        float3 angularForceM = 0;
        
        RigidBody body = rigidBodiesBuffer[id.x];
        
        for (int i = 0; i < body.particleCount; i++)
        {
            Particle particle = particlesBuffer[body.particleIndex + i];
            linearForce += particle.force;
            angularForceM += cross(particle.offsetPosition, particle.force);
        }
        float threshold = 0.000001;
        float bodyMass = particleMass * body.particleCount;
        body.velocity /= 1.0 + deltaTime * frictionCoefficient;
        body.velocity += linearForceScalar * deltaTime * linearForce / bodyMass; // dv = dt * F / m
        body.velocity.y -= gravityCoefficient * deltaTime;
        if (length(body.velocity) < threshold)
        {
            body.velocity = 0;
        }
        
        body.angularVelocity /= 1.0 + deltaTime * angularFrictionCoefficient;
        body.angularVelocity += angularForceScalar * deltaTime * angularForceM;
        if (length(body.angularVelocity) < threshold)
        {
            body.angularVelocity = 0;
        }

        rigidBodiesBuffer[id.x] = body;
    }
}

/////////////////////////////
// Computation Of Position //
/////////////////////////////
// Per RigidBody
// Use rigidBodyForce and rigidBodyTorque to compute the rigid body position and rotation. 
[numthreads(RIGID_BODY_THREAD_COUNT, 1, 1)]
void ComputePositionAndRotation(uint3 id : SV_DispatchThreadID)
{
    if (id.x < (uint)activeCount)
    {
        RigidBody body = rigidBodiesBuffer[id.x];
        body.position += body.velocity * deltaTime;
        float4 omega = float4(body.angularVelocity, 0);
        body.quaternion = normalize(body.quaternion + deltaTime * 0.5 * quat_concat(omega, body.quaternion));
        
        rigidBodiesBuffer[id.x] = body;
    }
}
