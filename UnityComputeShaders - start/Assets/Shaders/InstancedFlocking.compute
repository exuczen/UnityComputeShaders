#pragma kernel CSMain
#define GROUP_SIZE 256

#include "Utils/Random.cginc"

struct Boid
{
    float3 position;
    float3 direction;
    float noise_offset;
};

RWStructuredBuffer<Boid> boidsBuffer;

float time;
float deltaTime;
float rotationSpeed;
float boidSpeed;
float boidSpeedVariation;
float3 flockPosition;
float neighbourDistance;
int boidsCount;

[numthreads(GROUP_SIZE, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint instanceId = id.x;
    Boid boid = boidsBuffer[instanceId];

    float noise = lerp(-1, 1, noise1(time / 100.0 + boid.noise_offset));
    float velocity = boidSpeed * (1.0 + noise * boidSpeedVariation);

    float3 boid_pos = boid.position;
    float3 boid_dir = boid.direction;

    float3 separation = 0;
    float3 alignment = 0;
    float3 cohesion = flockPosition;

    uint nearbyCount = 1; // Add self that is ignored in loop

    for (uint i = 0; i < (uint)boidsCount; i++)
    {
        if (i == instanceId)
        {
            continue;
        }
        float3 tempBoid_position = boidsBuffer[i].position;

        float3 offset = boid.position - tempBoid_position;
        float dist = max(length(offset), 0.000001);
		
        if (dist < neighbourDistance)
        {
            separation += offset * (1.0 / dist - 1.0 / neighbourDistance);
            alignment += boidsBuffer[i].direction;
            cohesion += tempBoid_position;

            nearbyCount += 1;
        }
    }

    float avg = 1.0 / nearbyCount;
    alignment *= avg;
    cohesion *= avg;
    cohesion = normalize(cohesion - boid_pos);

    float3 direction = alignment + separation + cohesion;

    float prop = exp(-rotationSpeed * deltaTime); //This will be around 0.95
    boid.direction = lerp((direction), normalize(boid_dir), prop);

    boid.position += boid.direction * velocity * deltaTime;

    boidsBuffer[id.x] = boid;
}


