// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Circles
#pragma kernel Clear

#include "Random.cginc"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
shared RWTexture2D<float4> Result;

int texResolution;
float4 clearColor;
float4 circleColor;
float time;

void plot1(int x, int y, int2 centre)
{
    Result[uint2(centre.x + x, centre.y + y)] = circleColor;
}

void plot8(int x, int y, int2 centre)
{
    plot1(x, y, centre);
    plot1(y, x, centre);
    plot1(x, -y, centre);
    plot1(y, -x, centre);
    plot1(-x, -y, centre);
    plot1(-y, -x, centre);
    plot1(-x, y, centre);
    plot1(-y, x, centre);
}

void drawCircle(int2 centre, int radius)
{
    int x = 0;
    int y = radius;
    int d = 1 - radius;

    while (x < y)
    {
        if (d < 0)
        {
            d += 2 * x + 3;
        }
        else
        {
            d += 2 * (x - y) + 5;
            y--;
        }
		
        plot8(x, y, centre);

        x++;
    }
}

void drawJeskoCircle(int2 c, int r)
{
    int t1 = r >> 4;
    int x = r;
    int y = 0;
    
    while (x >= y)
    {
        plot8(x, y, c);
        
        y++;
        t1 += y;
        int t2 = t1 - x;
        if (t2 >= 0)
        {
            t1 = t2;
            x--;
        }
    }
}

[numthreads(32, 1, 1)]
void Circles(uint3 id : SV_DispatchThreadID)
{
    int2 centre = (int2)(random2(id.x + time) * texResolution);
    int radius = (int)(random(id.x) * 30);
    //drawCircle(centre, radius);
    drawJeskoCircle(centre, radius);
}

[numthreads(8, 8, 1)]
void Clear(uint3 id : SV_DispatchThreadID)
{
    Result[id.xy] = clearColor;
}
