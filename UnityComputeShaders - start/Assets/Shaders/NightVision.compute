// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "Utils/Random.cginc"
#include "Utils/Geometry.cginc"

Texture2D<float4> source;
RWTexture2D<float4> output;
float radius;
float edgeWidth;
int lines;
float4 tintColor;
float tintStrength;
float time;
int2 texSize;

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint2 index = (uint2(id.x, id.y) / 3) * 3;
    
    float noise = random((float2)id.xy / texSize, time);
    float3 sourceColor = lerp(source[id.xy].rgb * 2, source[index].rgb, noise);
    
    float3 grayScale = (sourceColor.r + sourceColor.g + sourceColor.b) / 3.0;
    float3 tintedColor = grayScale * tintColor.rgb;
    float3 finalColor = lerp(sourceColor, tintedColor, tintStrength);
    
    float uvY = (float)id.y / texSize.y;
    float scanline = saturate(smoothstep(0.1, 0.2, frac(uvY * lines + time * 3)) + 0.3);
    finalColor = lerp(source[id.xy].rgb * 0.5, finalColor, scanline);
    
    float3 blackColor = 0.0;
    float2 center = float2(texSize * 0.5);
    float2 xy = (float2)id.xy;
    
    center.x -= radius * 0.7;
    float leftLense = inCircle(xy, center.xy, radius, edgeWidth);
    center.x += radius * 1.4;
    float rightLense = inCircle(xy, center.xy, radius, edgeWidth);
    
    float inVision = saturate(leftLense + rightLense);
    finalColor = lerp(blackColor, finalColor, inVision);

    output[id.xy] = float4(finalColor, 1);
}
