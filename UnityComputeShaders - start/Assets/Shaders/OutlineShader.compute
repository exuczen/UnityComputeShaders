#define EPSILON 0.00001f
#define COLOR_CLEAR float4(0, 0, 0, 0)

#pragma multi_compile __ DEBUG_SHAPES DEBUG_CIRCLES DEBUG_DEPTH
#pragma kernel CSMain

#include "Utils/Random.cginc"
#include "Utils/Geometry.cginc"

Texture2D<float4> source;
Texture2D<float4> shapeTexture;
Texture2D<float4> circleTexture;
RWTexture2D<float4> output;

int LineThickness;
int2 ShapeTexSize;
int2 ShapeTexOffset;

int2 getShapeTexSize()
{
    int width, height;
    shapeTexture.GetDimensions(width, height);
    return int2(width, height);
}

bool getShapePixelColor(int2 xy, out float4 color)
{
    bool inBounds = all(xy >= 0 && xy < ShapeTexSize);
    if (inBounds && shapeTexture[xy].a > 0)
    {
        color = shapeTexture[xy];
        return true;
    }
    else
    {
        color = COLOR_CLEAR;
        return false;
    }
}

void getShapeRect4Color(int x, int y, int2 center, inout float4 destColor)
{
    float4 color = COLOR_CLEAR;
    
    for (int i = -1; i <= 1; i += 2)
    {
        for (int j = -1; j <= 1; j += 2)
        {
            int2 xy = center + int2(i * x, j * y);
            
            if (getShapePixelColor(xy, color) && color.w > destColor.w)
            {
                destColor = color;
            }
        }
    }
}

void getShapeRect8Color(int x, int y, int2 center, inout float4 color)
{
    getShapeRect4Color(x, y, center, color);
    getShapeRect4Color(y, x, center, color);
}

void getShapeCircleIsecColor(int2 c, int r, inout float4 color)
{
    int x = r;
    int y = 0;
    int d = 1 - r;
    
    if (r <= 1)
    {
        getShapeRect8Color(x, y, c, color);
    }
    else
    {
        while (x >= y)
        {
            getShapeRect8Color(x, y, c, color);
            y++;

            if (d < 0)
            {
                d += (y << 1) + 3;
            }
            else
            {
                d += ((y - x) << 1) + 5;
                x--;
            }
        }
    }
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    int2 shapeXY = ShapeTexOffset + id.xy;
    float4 shapeColor = shapeTexture[shapeXY];
    float4 circleColor = circleTexture[shapeXY];

#ifdef DEBUG_SHAPES
    output[id.xy] = shapeColor.a > 0 ? shapeColor : source[id.xy];
#elif defined DEBUG_DEPTH
    output[id.xy] = shapeColor.a > 0 ? shapeColor.a : float4(1, 0, 0, 1);
#elif defined DEBUG_CIRCLES
    output[id.xy] = circleColor.a > 0 ? circleColor : source[id.xy];
#else
    float4 color = COLOR_CLEAR;
    int r = LineThickness;
    
    if (shapeColor.a < EPSILON)
    {
        color = circleColor;
        getShapeCircleIsecColor(shapeXY, r, color);
    }
    if (color.a > EPSILON)
    {
        output[id.xy] = color;
    }
    else
    {
        output[id.xy] = source[id.xy];
    }
#endif
}
