#pragma kernel CSMain

#include "Utils/Random.cginc"

 // Particle's data
struct Particle
{
    float3 position;
    float3 velocity;
    float life;
};

struct Vertex
{
    float3 position;
    float2 uv;
    float life;
};

// Particle's data, shared with the shader
RWStructuredBuffer<Particle> particleBuffer;
RWStructuredBuffer<Vertex> vertexBuffer;

// Variables set from the CPU 
float deltaTime;
float3 mousePosition;
float halfSize;

void respawn(uint id)
{
    float3 normalF3 = randomMinMaxLengthVector3(id, 0.0, 0.8);
    
    particleBuffer[id].position = mousePosition + normalF3;
	// reset the life of this particle
    particleBuffer[id].life = 4;
    particleBuffer[id].velocity = float3(0, 0, 0);
}

[numthreads(256, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    Particle p = particleBuffer[id.x];
	
	// subtract the life based on deltaTime
    p.life -= deltaTime;

    float3 delta = mousePosition - p.position;
    float3 dir = normalize(delta);

    p.velocity += dir;
    p.position += p.velocity * deltaTime;

    particleBuffer[id.x] = p;
	
    if (particleBuffer[id.x].life < 0)
    {
        respawn(id.x);
        p = particleBuffer[id.x];
    }
    float3 ppos = p.position;
    int index = id.x * 6;
    vertexBuffer[index + 0].position = float3(ppos.x - halfSize, ppos.y - halfSize, ppos.z);
    vertexBuffer[index + 1].position = float3(ppos.x - halfSize, ppos.y + halfSize, ppos.z);
    vertexBuffer[index + 2].position = float3(ppos.x + halfSize, ppos.y + halfSize, ppos.z);
    vertexBuffer[index + 3].position = float3(ppos.x - halfSize, ppos.y - halfSize, ppos.z);
    vertexBuffer[index + 4].position = float3(ppos.x + halfSize, ppos.y + halfSize, ppos.z);
    vertexBuffer[index + 5].position = float3(ppos.x + halfSize, ppos.y - halfSize, ppos.z);
    
    for (int i = 0; i < 6; i++)
    {
        vertexBuffer[index + i].life = p.life;
    }
}
