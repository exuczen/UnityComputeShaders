#pragma kernel CSParticle

#include "Utils/Random.cginc"

struct Particle
{
    float3 position;
    float3 velocity;
    float life;
    uint randomSeed;
};

RWStructuredBuffer<Particle> particleBuffer;

// Variables set from the CPU 
float deltaTime;
float3 mousePosition;

void respawn(uint id)
{
    rng_state = particleBuffer[id].randomSeed;
    float3 normalF3 = randomMinMaxLengthVector3(0.0, 0.8);
    
    particleBuffer[id].position = mousePosition + normalF3;
	// reset the life of this particle
    particleBuffer[id].life = 4;
    particleBuffer[id].velocity = float3(0, 0, 0);
    particleBuffer[id].randomSeed = rng_state;
}

[numthreads(256, 1, 1)]
void CSParticle(uint3 id : SV_DispatchThreadID)
{
    Particle particle = particleBuffer[id.x];
    particle.life -= deltaTime;
    
    float3 delta = mousePosition - particle.position;
    float3 dir = normalize(delta);
    
    particle.velocity += dir;
    particle.position += particle.velocity * deltaTime;
    
    particleBuffer[id.x] = particle;
    
    if (particle.life < 0)
    {
        respawn(id.x);
    }
}
